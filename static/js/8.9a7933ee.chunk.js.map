{"version":3,"file":"static/js/8.9a7933ee.chunk.js","mappings":"wMACA,G,QAA0B,0BAA1B,EAAgH,+BAAhH,EAA4J,4BAA5J,EAAmO,yB,gDC4D7NA,GAAqBC,EAAAA,EAAAA,GAAiB,IAatCC,GAAoBC,EAAAA,EAAAA,GACzB,CAACC,KAAM,YADkBD,EAZ2C,SAACE,GAClE,OACA,kBAAOC,SAAUD,EAAME,aAAa,WAChC,0BACI,SAACC,EAAA,EAAK,CAACC,KAAM,iBAAkBC,UAAWC,EAAAA,EACtCC,YAAa,gBAAgBC,SAAU,CAACC,EAAAA,EAAcd,QAG9D,0BAAM,4BAAQ,kBAGtB,I,UC7BIe,GAAyBC,E,QAAAA,ID1BP,SAACX,GACnB,MAA0BA,EAAMY,YAA3BC,EAAQ,EAARA,SAAUC,EAAO,EAAPA,QAEXC,EAAiBF,EAASG,KAAI,SAAAC,GAAC,OAAE,yBAAkBA,EAAEC,SAAVD,EAAEE,GAAsB,IACnEC,EAAiBN,EAAQE,KAAI,SAAAK,GAAC,OAAE,yBAAiBA,EAAEjB,MAATiB,EAAEF,GAAkB,IAgBlE,OACI,gBAAKG,UAAWC,EAAU,UACtB,iBAAKD,UAAWC,EAAgB,WAC5B,gBAAKD,UAAWC,EAAa,SACxBH,KAEL,iBAAKE,UAAWC,EAAU,WACtB,yBAAMR,KAK1B,SAAClB,EAAiB,CAACI,SAhBO,SAACuB,GACnBxB,EAAMyB,aAAaD,EAAOE,gBAC1BF,EAAOE,eAAiB,EAC5B,WAoBJ,ICVaC,GAAuBC,EAAAA,EAAAA,KA5Bd,SAACC,GACnB,MAAO,CACHjB,YAAaiB,EAAMC,eAG3B,GAwBI,CACIL,aAAaM,EAAAA,GAFeH,CAInClB,GACD,G","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Dialog.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"imgClas\":\"Dialogs_imgClas__SF8VG\",\"dialogsItems\":\"Dialogs_dialogsItems__V6a24\",\"backgroundIMG\":\"Dialogs_backgroundIMG__EE8n1\",\"dialogItem\":\"Dialogs_dialogItem__8UuD7\",\"active\":\"Dialogs_active__HUb-I\",\"message\":\"Dialogs_message__Mf0kJ\"};","import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Navigate } from 'react-router-dom';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../FormsControls/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\n\r\n\r\n// type DialogType = {\r\n//     dialogsPage:DialogPageType\r\n//     //  dispatch:(action:ActionTypes)=>void\r\n//     //store:StoreType\r\n//     // newMessageBody:string\r\n//     updateNewMessageText:(newText: string)=>void\r\n//     addNewDialog:(dialogMessage: string)=>void\r\n// }\r\n\r\nexport const Dialog = (props: DialogsPropsType) => {\r\n    let {messages, dialogs} = props.dialogsPage;\r\n\r\n    let messageElemets = messages.map(m=><div key={m.id} >{m.message}</div>)\r\n    let dialogsElement = dialogs.map(d=><div key={d.id}>{d.name}</div>)\r\n    // let newMessageBody = newMessageText\r\n\r\n\r\n    const onNewMassageChange = (e:ChangeEvent<HTMLTextAreaElement>) => {\r\n        let newText = e.currentTarget.value\r\n      //  props.updateNewMessageText(newText)\r\n        //  props.store.dispatch(updateNewMesssageTextAC(newText))\r\n    }\r\n    interface FormValues {\r\n        newMassageBody: string;\r\n    }\r\n    const addNewMessage = (values: FormValues) => {\r\n        props.addNewDialog(values.newMassageBody);\r\n        values.newMassageBody = \"\"; // Это может вызвать ошибку, так как свойство только для чтения\r\n    }\r\n    return (\r\n        <div className={s.imgClas}>\r\n            <div className={s.backgroundIMG}>\r\n                <div className={s.dialogItem}>\r\n                    {dialogsElement}\r\n                </div>\r\n                <div className={s.message}>\r\n                    <div>{messageElemets}</div>\r\n        {/*            <div><textarea value={newMessageText}\r\n                                   onChange={onNewMassageChange}\r\n                                   placeholder={'Enter message'}></textarea></div>\r\n                    <div onClick={addDialog}><button>AddDialog</button></div>*/}\r\n<TextareaReduxForm onSubmit={addNewMessage}/>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\ntype TextareaFormType = {\r\n    newMassageBody:string\r\n}\r\nconst maxLengthCreator50 = maxLengthCreator(50)\r\nconst TextareaForm : React.FC<InjectedFormProps<TextareaFormType>> = (props)=>{\r\n    return (\r\n    <form  onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name={'newMassageBody'} component={Textarea}\r\n                placeholder={'Enter message'}validate={[requiredField,maxLengthCreator50]}\r\n            ></Field>\r\n        </div>\r\n        <div ><button>AddDialog</button></div>\r\n    </form>\r\n    )\r\n}\r\nconst TextareaReduxForm = reduxForm<TextareaFormType>\r\n({form: 'Textarea'})(TextareaForm)","import React, {ChangeEvent, useRef} from \"react\";\r\nimport {DialogPageType, sendTextAC} from \"../redux/dialogs-reducer\";\r\nimport { Dialog } from \"./Dialog\";\r\nimport StoreContex from \"../../StoreContex\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {witchAutchRedirect} from \"../../hoc/AutchRedirect\";\r\n\r\nexport type DialogsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage:DialogPageType\r\n\r\n\r\n}\r\ntype mapDispatchToPropsType = {\r\n    //updateNewMessageText:(newText:string)=>void\r\n    addNewDialog:(newMassageBody:string)=>void\r\n}\r\nlet mapStateToProps = (state:AppStateType):mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsReducer,\r\n\r\n    }\r\n}\r\n\r\n/*let mapDispatchToProps = (dispatch:Dispatch):mapDispatchToPropsType =>{\r\n    return {\r\n        updateNewMessageText:(newText:string)=>{\r\n            dispatch(updateNewMesssageTextAC(newText))\r\n        },\r\n        addNewDialog:(newMessageBody:string)=>{\r\n            dispatch(sendTextAC(newMessageBody))\r\n        },\r\n    }\r\n}*/\r\n/*export default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {updateNewMessageText: updateNewMesssageTextAC,\r\n            addNewDialog:sendTextAC\r\n        }),\r\n    witchAutchRedirect\r\n)(Dialog)*/\r\n\r\nlet AutchRedirectComponent = witchAutchRedirect(Dialog)\r\n\r\n\r\nexport const SuperDialogContainer = connect(mapStateToProps,\r\n    {\r\n        addNewDialog:sendTextAC\r\n    })\r\n(AutchRedirectComponent)\r\nexport default SuperDialogContainer;"],"names":["maxLengthCreator50","maxLengthCreator","TextareaReduxForm","reduxForm","form","props","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","requiredField","AutchRedirectComponent","witchAutchRedirect","dialogsPage","messages","dialogs","messageElemets","map","m","message","id","dialogsElement","d","className","s","values","addNewDialog","newMassageBody","SuperDialogContainer","connect","state","dialogsReducer","sendTextAC"],"sourceRoot":""}